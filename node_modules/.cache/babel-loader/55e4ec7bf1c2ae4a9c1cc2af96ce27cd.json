{"ast":null,"code":"import path from 'path';\nimport qs from 'query-string'; // Only deals with json responses\n\nclass Api {\n  constructor({\n    baseUrl,\n    searchParams\n  }) {\n    this._baseUrl = baseUrl;\n    this._baseSearchParams = searchParams || {};\n  }\n\n  async get(endpoint, params) {\n    const hitUrl = this._generateUrl(endpoint, params);\n\n    const response = await fetch(hitUrl, {\n      method: 'GET'\n    });\n    return this._parseJsonResponse(response);\n  }\n\n  async _parseJsonResponse(response) {\n    let json = null;\n\n    try {\n      json = await response.json();\n    } catch (e) {// TODO Do something if response has no, or invalid JSON\n    }\n\n    if (response.ok) {\n      return json;\n    } else {\n      const error = new Error(response.statusText);\n      error.isFromServer = true;\n      error.response = response;\n      error.responseJson = json;\n      throw error;\n    }\n  }\n\n  _generateUrl(endpoint, params) {\n    const search = qs.stringify({ ...this._baseSearchParams,\n      ...params\n    });\n    const url = path.join(this._baseUrl, endpoint);\n    return [url, search].join('?');\n  }\n\n}\n\nexport default Api;","map":{"version":3,"sources":["/Users/interviewbit/workspace/react/youtube-react-clone/src/utils/api.js"],"names":["path","qs","Api","constructor","baseUrl","searchParams","_baseUrl","_baseSearchParams","get","endpoint","params","hitUrl","_generateUrl","response","fetch","method","_parseJsonResponse","json","e","ok","error","Error","statusText","isFromServer","responseJson","search","stringify","url","join"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,cAAf,C,CAEA;;AACA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAA4B;AACrC,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,iBAAL,GAAyBF,YAAY,IAAI,EAAzC;AACD;;AAEQ,QAAHG,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC1B,UAAMC,MAAM,GAAG,KAAKC,YAAL,CAAkBH,QAAlB,EAA4BC,MAA5B,CAAf;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAD,EAAS;AACnCI,MAAAA,MAAM,EAAE;AAD2B,KAAT,CAA5B;AAIA,WAAO,KAAKC,kBAAL,CAAwBH,QAAxB,CAAP;AACD;;AAEuB,QAAlBG,kBAAkB,CAACH,QAAD,EAAW;AACjC,QAAII,IAAI,GAAG,IAAX;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAb;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AACD;;AAED,QAAIL,QAAQ,CAACM,EAAb,EAAiB;AACf,aAAOF,IAAP;AACD,KAFD,MAEO;AACL,YAAMG,KAAK,GAAG,IAAIC,KAAJ,CAAUR,QAAQ,CAACS,UAAnB,CAAd;AACAF,MAAAA,KAAK,CAACG,YAAN,GAAqB,IAArB;AACAH,MAAAA,KAAK,CAACP,QAAN,GAAiBA,QAAjB;AACAO,MAAAA,KAAK,CAACI,YAAN,GAAqBP,IAArB;AAEA,YAAMG,KAAN;AACD;AACF;;AAEDR,EAAAA,YAAY,CAACH,QAAD,EAAWC,MAAX,EAAmB;AAC7B,UAAMe,MAAM,GAAGxB,EAAE,CAACyB,SAAH,CAAa,EAAE,GAAG,KAAKnB,iBAAV;AAA6B,SAAGG;AAAhC,KAAb,CAAf;AACA,UAAMiB,GAAG,GAAG3B,IAAI,CAAC4B,IAAL,CAAU,KAAKtB,QAAf,EAAyBG,QAAzB,CAAZ;AACA,WAAO,CAACkB,GAAD,EAAMF,MAAN,EAAcG,IAAd,CAAmB,GAAnB,CAAP;AACD;;AAvCO;;AA0CV,eAAe1B,GAAf","sourcesContent":["import path from 'path';\nimport qs from 'query-string';\n\n// Only deals with json responses\nclass Api {\n  constructor({ baseUrl, searchParams }) {\n    this._baseUrl = baseUrl;\n    this._baseSearchParams = searchParams || {};\n  }\n\n  async get(endpoint, params) {\n    const hitUrl = this._generateUrl(endpoint, params);\n    const response = await fetch(hitUrl, {\n      method: 'GET',\n    });\n\n    return this._parseJsonResponse(response);\n  }\n\n  async _parseJsonResponse(response) {\n    let json = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // TODO Do something if response has no, or invalid JSON\n    }\n\n    if (response.ok) {\n      return json;\n    } else {\n      const error = new Error(response.statusText);\n      error.isFromServer = true;\n      error.response = response;\n      error.responseJson = json;\n\n      throw error;\n    }\n  }\n\n  _generateUrl(endpoint, params) {\n    const search = qs.stringify({ ...this._baseSearchParams, ...params });\n    const url = path.join(this._baseUrl, endpoint);\n    return [url, search].join('?');\n  }\n}\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}